Hello, Linuxers!

The debugging malloc library (dbmalloc_1.14) is available for linux now.
I've made some short tests running the included test programs (Configuration:
Linux 0.99.5, gcc 2.3.3 and libc 4.3), but I don't know if I've found all
pitfalls.

To compile it you should NOT call 'make runtests' or start the 'Configure'
script as it is written in README. There were several problems with 
Configure and the files it creates. When I have some time I will make a
'clean' release. Take a look at the Makefile (to check DESTDIR, CFLAGS, 
etc) and call 'make'. If you like you can compile and start several test 
programs with

	make tests
	./testmalloc
	./testmem
	./teststack
	./testerr	# Don't run it yet! See below.

testmalloc should not report any error. It counts to 1000000 and gives
you some output about the used memory (XWindows user: You should run it
in a real BIG xterm window.)

testmem shouldn't say anything. (I haven't written that. I hate those 
programs which don't report even just a little message like 'OK' or 
'All's fine').

teststack will give you some warnings generated by the dbmalloc library,
but that's OK. Take a look at teststack.c or run it with gdb to see what's
 happening.

testerr will produce a lot of error output. It allocates some memory 
blocks and destroys the malloc frame of some of them to force error 
messages. The last step is to create a fatal error to leave the program. 
Unfortunately we will get an infinite loop because exit() (and _exit() 
too) calls malloc() or another related function from the dbmalloc library, 
this function produces a fatal error message and calls exit() and so 
forth. (The same problem occures if you run the Configure script. It 
compiles and calls cctest.c several times. cctest.c has it's own memcpy(), 
which prints an error message and calls exit(). Both exit() and _exit() 
call memcpy(). A hint to the linux library developers: exit() and _exit() 
should contain a local static flag showing that they were called the 
second time. Or you will probably get some problems with atexit().)

Installation is as easy as compilation: Just call 'make install'. I hope
you've checked the paths in Makefile. The manual page is a little bit old
(it's from version 1.11), but it's better than nothing. Event though it's
name is malloc.3 it will be installed as dbmalloc.3 in /usr/man/man3, so 
don't worry about your old malloc.3.

There are also debugging functions for XWindow applications (XtMalloc, 
XtFree, etc.). To use it you should modify your <X11/Intrinsic.h> and 
install it in /usr/debug_include. But in most cases the following
quick hack will do:

--------------------- Cut here ---------------------
/*
 *	This is a quick hack to use the dbmalloc
 *	library together with Xtoolkit. Copy this header
 *	file to /usr/debug_include/X11/Intrinsic.h
 *
 *	Harald Dunkel
 */

#include "/usr/X386/include/X11/Intrinsic.h"
#include "../malloc.h"

--------------------- Cut here ---------------------

The same modification should be done with <X11/Xlibint.h>: 

--------------------- Cut here ---------------------
/*
 *	This is a quick hack to use the dbmalloc
 *	library together with XLib. Copy this header
 *	file to /usr/debug_include/X11/Xlibint.h
 *
 *	Harald Dunkel
 */

#include "/usr/X386/include/X11/Xlibint.h"
#include "../malloc.h"

--------------------- Cut here ---------------------

The hacks may not work with all applications, especially if you
include both header files in one source file. I haven't tested
the second file.

Have fun. 

Harald Dunkel
hari@pool.informatik.rwth-aachen.de
